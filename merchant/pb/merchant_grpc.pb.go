// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pb/merchant.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MerchantServiceClient is the client API for MerchantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantServiceClient interface {
	GetMerchant(ctx context.Context, in *GetMerchantRequest, opts ...grpc.CallOption) (*GetMerchantResponse, error)
	GetQPS(ctx context.Context, in *GetQPSRequest, opts ...grpc.CallOption) (*GetQPSResponse, error)
	MerchantActive(ctx context.Context, in *MerchantActiveRequest, opts ...grpc.CallOption) (*MerchantActiveResponse, error)
	FindMerchant(ctx context.Context, in *FindMerchantRequest, opts ...grpc.CallOption) (*FindMerchantResponse, error)
}

type merchantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantServiceClient(cc grpc.ClientConnInterface) MerchantServiceClient {
	return &merchantServiceClient{cc}
}

func (c *merchantServiceClient) GetMerchant(ctx context.Context, in *GetMerchantRequest, opts ...grpc.CallOption) (*GetMerchantResponse, error) {
	out := new(GetMerchantResponse)
	err := c.cc.Invoke(ctx, "/merchant.MerchantService/GetMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetQPS(ctx context.Context, in *GetQPSRequest, opts ...grpc.CallOption) (*GetQPSResponse, error) {
	out := new(GetQPSResponse)
	err := c.cc.Invoke(ctx, "/merchant.MerchantService/GetQPS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) MerchantActive(ctx context.Context, in *MerchantActiveRequest, opts ...grpc.CallOption) (*MerchantActiveResponse, error) {
	out := new(MerchantActiveResponse)
	err := c.cc.Invoke(ctx, "/merchant.MerchantService/MerchantActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) FindMerchant(ctx context.Context, in *FindMerchantRequest, opts ...grpc.CallOption) (*FindMerchantResponse, error) {
	out := new(FindMerchantResponse)
	err := c.cc.Invoke(ctx, "/merchant.MerchantService/FindMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantServiceServer is the server API for MerchantService service.
// All implementations must embed UnimplementedMerchantServiceServer
// for forward compatibility
type MerchantServiceServer interface {
	GetMerchant(context.Context, *GetMerchantRequest) (*GetMerchantResponse, error)
	GetQPS(context.Context, *GetQPSRequest) (*GetQPSResponse, error)
	MerchantActive(context.Context, *MerchantActiveRequest) (*MerchantActiveResponse, error)
	FindMerchant(context.Context, *FindMerchantRequest) (*FindMerchantResponse, error)
	mustEmbedUnimplementedMerchantServiceServer()
}

// UnimplementedMerchantServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMerchantServiceServer struct {
}

func (UnimplementedMerchantServiceServer) GetMerchant(context.Context, *GetMerchantRequest) (*GetMerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) GetQPS(context.Context, *GetQPSRequest) (*GetQPSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQPS not implemented")
}
func (UnimplementedMerchantServiceServer) MerchantActive(context.Context, *MerchantActiveRequest) (*MerchantActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantActive not implemented")
}
func (UnimplementedMerchantServiceServer) FindMerchant(context.Context, *FindMerchantRequest) (*FindMerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) mustEmbedUnimplementedMerchantServiceServer() {}

// UnsafeMerchantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantServiceServer will
// result in compilation errors.
type UnsafeMerchantServiceServer interface {
	mustEmbedUnimplementedMerchantServiceServer()
}

func RegisterMerchantServiceServer(s grpc.ServiceRegistrar, srv MerchantServiceServer) {
	s.RegisterService(&MerchantService_ServiceDesc, srv)
}

func _MerchantService_GetMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.MerchantService/GetMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchant(ctx, req.(*GetMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetQPS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQPSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetQPS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.MerchantService/GetQPS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetQPS(ctx, req.(*GetQPSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_MerchantActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).MerchantActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.MerchantService/MerchantActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).MerchantActive(ctx, req.(*MerchantActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_FindMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).FindMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.MerchantService/FindMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).FindMerchant(ctx, req.(*FindMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantService_ServiceDesc is the grpc.ServiceDesc for MerchantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "merchant.MerchantService",
	HandlerType: (*MerchantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMerchant",
			Handler:    _MerchantService_GetMerchant_Handler,
		},
		{
			MethodName: "GetQPS",
			Handler:    _MerchantService_GetQPS_Handler,
		},
		{
			MethodName: "MerchantActive",
			Handler:    _MerchantService_MerchantActive_Handler,
		},
		{
			MethodName: "FindMerchant",
			Handler:    _MerchantService_FindMerchant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/merchant.proto",
}
